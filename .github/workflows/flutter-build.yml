name: Flutter CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]
  # 手动触发选项
  workflow_dispatch:
    inputs:
      clear_cache:
        description: '清除缓存并强制重新构建'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以便调试
      
      - name: Check code version
        run: |
          echo "当前提交: $(git rev-parse HEAD)"
          echo "最近5次提交:"
          git log -n 5 --oneline
          echo "修改的文件:"
          git diff --name-only HEAD~1 HEAD
      
      # 只缓存Gradle依赖项，不包含任何编译产物
      - name: Cache Gradle dependencies
        if: ${{ github.event.inputs.clear_cache != 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches/modules-2
            ~/.gradle/caches/jars-*
            ~/.gradle/wrapper/dists
          key: ${{ runner.os }}-gradle-deps-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-gradle-deps-
      
      # 只缓存pub依赖项，不包含任何代码编译产物
      - name: Cache Flutter dependencies
        if: ${{ github.event.inputs.clear_cache != 'true' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-deps-${{ hashFiles('**/pubspec.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-flutter-deps-

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
          cache: ${{ github.event.inputs.clear_cache != 'true' }}

      - name: Decode Keystore
        run: |
          echo "开始处理密钥文件..."
          echo "检查目标目录是否存在..."
          mkdir -p android/app
          echo "目标目录创建完成"
          
          echo "解码并保存密钥文件..."
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks
          
          echo "验证密钥文件..."
          if [ -f "android/app/upload-keystore.jks" ]; then
            echo "密钥文件已成功创建"
            ls -l android/app/upload-keystore.jks
          else
            echo "错误：密钥文件未创建成功"
            exit 1
          fi
          
          echo "创建key.properties文件..."
          cat << EOF > android/key.properties
          storePassword=${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=../app/upload-keystore.jks
          EOF
          
          echo "检查key.properties文件..."
          if [ -f "android/key.properties" ]; then
            echo "key.properties文件存在"
            echo "验证密钥文件路径..."
            cat android/key.properties | grep -v "password" | grep -v "alias"
          else
            echo "错误：key.properties文件不存在"
            exit 1
          fi

      - name: Check Environment
        run: |
          echo "Flutter version:"
          flutter --version
          echo "Dart version:"
          dart --version
          echo "Java version:"
          java -version
          echo "Workspace directory:"
          pwd
          echo "Directory contents:"
          ls -la
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        
      #- name: Analyze project source
      #  run: flutter analyze --no-fatal-warnings
        
      # 强制清理编译产物，确保使用最新代码
      - name: Clean before build
        run: flutter clean
              
      - name: Build APK
        run: flutter build apk --release --target-platform android-arm64 --split-per-abi

      - name: Get version from pubspec
        id: version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | cut -d' ' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: List APK files
        run: ls -l build/app/outputs/flutter-apk/

      - name: Rename APK with version
        run: |
          cd build/app/outputs/flutter-apk/
          if [ -f "app-arm64-v8a-release.apk" ]; then
            mv "app-arm64-v8a-release.apk" "app-${{ steps.version.outputs.version }}-arm64-v8a.apk"
          fi

      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/app/outputs/flutter-apk/app-${{ steps.version.outputs.version }}-arm64-v8a.apk
          
      - name: Upload Artifact for Debug
        uses: actions/upload-artifact@v4
        with:
          name: arm64-v8a-apk
          path: build/app/outputs/flutter-apk/app-${{ steps.version.outputs.version }}-arm64-v8a.apk
          retention-days: 7
